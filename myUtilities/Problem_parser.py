import json

def parse_tree_to_json(tree):
    '''It traverses the parse-tree generated by the antlr4 parser and returns the tree in json format

    Parameters
    ----------
    tree: parse-tree obtained by antlr4

    Returns
    -------
    problem_dict: The parse-tree in a key-value format (dict)

    Writes
    ------
    It writes the result in JSON format as json_result/problem.json
    '''

    json_data = {}

    for i in range (tree.getChildCount()):
        if 'problem' in tree.getChild(i).getText():
            problem_name = getProblemName(tree.getChild(i).getText())
            json_data['problem'] = problem_name
        if ':domain' in tree.getChild(i).getText():
            domain_name = getDomainName(tree.getChild(i).getText())
            json_data['domain'] = domain_name
        elif ':objects' in tree.getChild(i).getText():
            objects_list = getObjectsList(tree.getChild(i))
            json_data['objects'] = objects_list
        elif ':init' in tree.getChild(i).getText():
            init_list = getInitList(tree.getChild(i))
            json_data['init'] = init_list
        elif ':goal' in tree.getChild(i).getText():
            goal_list = getGoalList(tree.getChild(i))
            json_data['goal'] = goal_list

    with open("json_results/problem.json", 'w') as json_file:
       json.dump(json_data, json_file, indent= 4)

    return json_data

def getProblemName(stringa):
    stringa = stringa.replace("(problem", "")
    stringa = stringa.replace(")", "")
    return stringa.strip()

def getDomainName(stringa):
    stringa = stringa.replace("(:domain", "")
    stringa = stringa.replace(")", "")
    return stringa.strip()

def getObjectsList(node):
    result = []
    for child in range(2, node.getChildCount()-1):
        result.append(getObjects(node.getChild(child)))
    return result

def getObjects(node):
    result = {}
    lista_di_oggetti = []
    result["objectType"] = node.getChild(-1).getText()
    for child in range(node.getChildCount()-2):#-2 perchè il penultimo è "-" e -1 è il tipo
        lista_di_oggetti.append(node.getChild(child).getText())
    result["objectIstances"] = lista_di_oggetti    
    return result

def getInitList(node):
    result = []
    for child in range(2, node.getChildCount()-1):
        if "=" in node.getChild(child).getText():
            result.append(getAssignmentPredicate(node.getChild(child)))
        else:
            result.append(getSimplePredicate(node.getChild(child)))
    return result

def getSimplePredicate(node):
    result = {}
    if node.getChildCount() == 1:
        result = getSimplePredicate(node.getChild(0))
    else:
        result["string"] = node.getText()
        result["isAssignment?"] = False
        result["predName"] = node.getChild(1).getText()
        result["predObjects"] = []
        for child in range(2, node.getChildCount()-1):
            result["predObjects"].append(node.getChild(child).getText())
        return result
    return result

def getAssignmentPredicate(node):
    result = {}
    if node.getChildCount() == 1:
        result = getAssignmentPredicate(node.getChild(0))
    else:
        result["string"] = node.getText()
        result["isAssignment?"] = True
        result["operands"] = []
        result["operands"].append(getOperand(node.getChild(2)))
        result["operands"].append(getConstant(node.getChild(3)))

    return result

def getOperand(node):
    result = {}
    result["operandName"] = node.getChild(1).getText()
    result["operandObjects"] = []
    for child in range(2, node.getChildCount()-1):
        result["operandObjects"].append(node.getChild(child).getText())
    return result

def getConstant(node):
    result ={}
    result["operandName"] = "Constant"
    result["operandValue"] = node.getText()
    return result


def getGoalList(node):
    node = node.getChild(2)
    result = []
    for child in range(2, node.getChildCount()-1):
        result.append(getGoalPredicate(node.getChild(child)))
    return result

def getGoalPredicate(node):
    result = {}
    if node.getChildCount() == 1:
        result = getSimplePredicate(node.getChild(0))
    else:
        result["string"] = node.getText()
        result["predName"] = node.getChild(1).getText()
        result["predObjects"] = []
        for child in range(2, node.getChildCount()-1):
            result["predObjects"].append(node.getChild(child).getText())
        return result
    return result